{"version":3,"sources":["Card.jsx","CardList.jsx","SearchBox.jsx","DateTimeComp.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Card","_ref","user","react_default","a","createElement","className","src","concat","id","alt","name","age","email","CardList","list","friends","map","friend","i","src_Card","key","SearchBox","textchange","type","placeholder","onChange","DateTimeComp","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","_this2","timeId","setInterval","tick","clearInterval","setState","toDateString","toLocaleTimeString","Component","App","props","TextChange","event","criteria","target","value","fetch","then","response","json","users","console","log","_this3","filterFriends","filter","robot","includes","length","src_DateTimeComp","src_SearchBox","src_CardList","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a1ccf95.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ user }) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${user.id}?set=set4`} alt=\"Officer\" />\r\n      <p>id:{user.id}</p>\r\n      <h1>Name:{user.name}</h1>\r\n      <h5>age:{user.age}</h5>\r\n      <h5>Email:{user.email}</h5>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n// import { users } from \"./users\";\r\n\r\nconst CardList = ({ friends }) => {\r\n  const list = friends.map((friend, i) => {\r\n    return <Card user={friend} key={i} />;\r\n  });\r\n  return <div>{list}</div>;\r\n};\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ textchange }) => {\r\n  return <input type=\"search\" placeholder=\"search\" onChange={textchange} />;\r\n};\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\r\n\r\nclass DateTimeComp extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = { date: new Date() };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timeId = setInterval(() => this.tick(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timeId);\r\n  }\r\n\r\n  tick() {\r\n    this.setState({ date: new Date() });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h5>\r\n          {`${this.state.date.toDateString()} ${this.state.date.toLocaleTimeString()}`}{\" \"}\r\n        </h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default DateTimeComp;\r\n","import React from \"react\";\r\nimport CardList from \"./CardList\";\r\nimport SearchBox from \"./SearchBox\";\r\n// import { users } from \"./users\";\r\nimport DateTimeComp from \"./DateTimeComp\";\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      friends: [],\r\n      criteria: \"\"\r\n    };\r\n  }\r\n  TextChange = event => {\r\n    //console.log(event.target.value);\r\n    this.setState({ criteria: event.target.value });\r\n  };\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/usersx\")\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(users => {\r\n        this.setState({ friends: users });\r\n      });\r\n    console.log(this.state.friends);\r\n  }\r\n\r\n  render() {\r\n    const filterFriends = this.state.friends.filter(robot => {\r\n      return robot.name.includes(this.state.criteria);\r\n    });\r\n\r\n    if (filterFriends.length === 0) {\r\n      return (\r\n        <div>\r\n          <h1>Loading...</h1>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <div>\r\n            <DateTimeComp />\r\n          </div>\r\n          <div className=\"tc\">\r\n            <h1>Robofriends</h1>\r\n            <SearchBox textchange={this.TextChange} />\r\n          </div>\r\n          <div>\r\n            <CardList friends={filterFriends} />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}